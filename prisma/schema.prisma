generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  snippets      Snippet[]
  folders       Folder[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Snippet {
  id          String   @id @default(cuid())
  title       String
  language    String
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  folderId    String?
  userId      String
  folder      Folder?  @relation(fields: [folderId], references: [id])
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  snippetTags Tag[]    @relation("SnippetTags")

  @@index([title])
  @@index([folderId])
  @@index([userId])
  @@map("snippets")
}

model Folder {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  snippets  Snippet[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([name])
  @@index([userId])
  @@map("folders")
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  snippets  Snippet[] @relation("SnippetTags")

  @@index([name])
  @@map("tags")
}
